# -*- coding: utf-8 -*-
"""Hemanath_MLA_CIA1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/139hUQ7BUcStB-nXTMAmiEilT-JjNsEkR
"""

#importing required libraries
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from pandas.plotting import scatter_matrix
from sklearn.linear_model import LinearRegression
from time import time
from sklearn.model_selection import train_test_split
from sklearn import linear_model 
import sklearn.metrics as sm

#connecting to cloud
from google.colab import drive
drive.mount("/content/gdrive")

# Commented out IPython magic to ensure Python compatibility.
# %cd /content/gdrive/My Drive/Colab Notebooks/

#data exploration
df = pd.read_csv("CeoCompensation.csv")
df.info()

df.head()

#checking for null
print(df.isnull().sum())
df[df.isnull() == True].head()

sns.heatmap(df.corr())

#multivariate analysis
comp_sm = scatter_matrix(df[['COMP', 'EXPER', 'SALES']])

ax = sns.kdeplot(df['COMP'])
ax

df['COMP'].describe()

comp = ['COMP', 'EXPER']

for col in comp:
    ax_comp = sns.kdeplot(df[col])
    ax_comp

plt.figure(figsize=(15,8))
for col in list(df['EXPER'].unique()):
    sns.kdeplot(df['COMP'][df['EXPER'] == col], label = col)

comp = ['COMP', 'SALES']

for col in comp:
    ax_comp2 = sns.kdeplot(df[col])
    ax_comp2

plt.figure(figsize=(15,8))
for col in list(df['SALES'].unique()):
    sns.kdeplot(df['COMP'][df['SALES'] == col], label = col)

#linear regression model for compensation and experience
X = df['EXPER']
Y = df['COMP']

#training and dataset
X_train, X_test, Y_train, Y_test = train_test_split(X,Y, test_size=0.3, random_state=42)

X_train = np.array(X_train).reshape((len(X_train),1))
Y_train = np.array(Y_train).reshape((len(Y_train),1))

X_test = np.array(X_test).reshape(len(X_test), 1)
Y_test = np.array(Y_test).reshape(len(Y_test), 1)

model = linear_model.LinearRegression()
model.fit(X_train, Y_train)

#Prediction Result of Training Data
Y_train_pred = model.predict(X_train)

plt.figure()
plt.scatter(X_train, Y_train, color='blue', label="True Value")
plt.plot(X_train, Y_train_pred, color='black', linewidth=2, label="Prediction")
plt.xlabel("Years of Experiences")
plt.ylabel("Compensation")
plt.title('Prediction Result of Training Data')
plt.legend()
plt.show()

#Prediction Result of Testing Data
Y_test_pred = model.predict(X_test)

plt.figure()
plt.scatter(X_test, Y_test, color='green', label='True Value')
plt.plot(X_test, Y_test_pred, color='black', linewidth=2, label='Prediction')
plt.xlabel("Years of Experiences")
plt.ylabel("Compensation")
plt.title('Prediction Result of Test data')
plt.legend()
plt.show()

print("Mean squared error =", round(sm.mean_squared_error(Y_test, Y_test_pred), 2))
print("Explain variance score =", round(sm.explained_variance_score(Y_test, Y_test_pred), 2))
print("R2 score =", round(sm.r2_score(Y_test, Y_test_pred), 2))

#linear regression model for compensation and sales

X = df['SALES']
Y = df['COMP']

X_train, X_test, Y_train, Y_test = train_test_split(X,Y, test_size=0.3, random_state=42)
X_train = np.array(X_train).reshape((len(X_train),1))
Y_train = np.array(Y_train).reshape((len(Y_train),1))

X_test = np.array(X_test).reshape(len(X_test), 1)
Y_test = np.array(Y_test).reshape(len(Y_test), 1)
model = linear_model.LinearRegression()
model.fit(X_train, Y_train)

Y_train_pred = model.predict(X_train)

#Prediction Result of Training data
plt.figure()
plt.scatter(X_train, Y_train, color='blue', label="True Value")
plt.plot(X_train, Y_train_pred, color='black', linewidth=2, label="Prediction")
plt.xlabel("Sales")
plt.ylabel("Compensation")
plt.title('Prediction Result of Training Data')
plt.legend()
plt.show()

#Prediction Result of Testing data
Y_test_pred = model.predict(X_test)

plt.figure()
plt.scatter(X_test, Y_test, color='green', label='True Value')
plt.plot(X_test, Y_test_pred, color='black', linewidth=2, label='Prediction')
plt.xlabel("Sales")
plt.ylabel("Compensation")
plt.title('Prediction Result of Test data')
plt.legend()
plt.show()

print("Mean squared error =", round(sm.mean_squared_error(Y_test, Y_test_pred), 2))
print("Explain variance score =", round(sm.explained_variance_score(Y_test, Y_test_pred), 2))
print("R2 score =", round(sm.r2_score(Y_test, Y_test_pred), 2))

